{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matth\\\\SWEProject3\\\\my-resume-site\\\\src\\\\components\\\\DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './DarkModeToggle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkModeToggle = () => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  useEffect(() => {\n    // Check if user has previously set a preference\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode) {\n      setIsDarkMode(savedMode === 'true');\n    } else {\n      // Or check if user's system prefers dark mode\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setIsDarkMode(prefersDark);\n    }\n  }, []);\n  useEffect(() => {\n    // Apply the dark mode class to the document body\n    if (isDarkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n    // Save preference to localStorage\n    localStorage.setItem('darkMode', isDarkMode);\n  }, [isDarkMode]);\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dark-mode-toggle\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDarkMode,\n      \"aria-label\": \"Toggle dark mode\",\n      children: isDarkMode ? /*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"Light mode\",\n        children: \"\\u2600\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"Dark mode\",\n        children: \"\\uD83C\\uDF19\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(DarkModeToggle, \"jZSDCHM8qUYa7sOOCe+CR2toAGQ=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DarkModeToggle","_s","isDarkMode","setIsDarkMode","savedMode","localStorage","getItem","prefersDark","window","matchMedia","matches","document","body","classList","add","remove","setItem","toggleDarkMode","className","children","onClick","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/matth/SWEProject3/my-resume-site/src/components/DarkModeToggle.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './DarkModeToggle.css';\r\n\r\nconst DarkModeToggle = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if user has previously set a preference\r\n    const savedMode = localStorage.getItem('darkMode');\r\n    if (savedMode) {\r\n      setIsDarkMode(savedMode === 'true');\r\n    } else {\r\n      // Or check if user's system prefers dark mode\r\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      setIsDarkMode(prefersDark);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Apply the dark mode class to the document body\r\n    if (isDarkMode) {\r\n      document.body.classList.add('dark-mode');\r\n    } else {\r\n      document.body.classList.remove('dark-mode');\r\n    }\r\n    // Save preference to localStorage\r\n    localStorage.setItem('darkMode', isDarkMode);\r\n  }, [isDarkMode]);\r\n\r\n  const toggleDarkMode = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dark-mode-toggle\">\r\n      <button onClick={toggleDarkMode} aria-label=\"Toggle dark mode\">\r\n        {isDarkMode ? (\r\n          <span role=\"img\" aria-label=\"Light mode\">‚òÄÔ∏è</span>\r\n        ) : (\r\n          <span role=\"img\" aria-label=\"Dark mode\">üåô</span>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DarkModeToggle; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAClD,IAAIF,SAAS,EAAE;MACbD,aAAa,CAACC,SAAS,KAAK,MAAM,CAAC;IACrC,CAAC,MAAM;MACL;MACA,MAAMG,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;MAC7EP,aAAa,CAACI,WAAW,CAAC;IAC5B;EACF,CAAC,EAAE,EAAE,CAAC;EAENX,SAAS,CAAC,MAAM;IACd;IACA,IAAIM,UAAU,EAAE;MACdS,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1C,CAAC,MAAM;MACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;IAC7C;IACA;IACAV,YAAY,CAACW,OAAO,CAAC,UAAU,EAAEd,UAAU,CAAC;EAC9C,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMe,cAAc,GAAGA,CAAA,KAAM;IAC3Bd,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAED,oBACEH,OAAA;IAAKmB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC/BpB,OAAA;MAAQqB,OAAO,EAAEH,cAAe;MAAC,cAAW,kBAAkB;MAAAE,QAAA,EAC3DjB,UAAU,gBACTH,OAAA;QAAMsB,IAAI,EAAC,KAAK;QAAC,cAAW,YAAY;QAAAF,QAAA,EAAC;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,gBAElD1B,OAAA;QAAMsB,IAAI,EAAC,KAAK;QAAC,cAAW,WAAW;QAAAF,QAAA,EAAC;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IACjD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACxB,EAAA,CAzCID,cAAc;AAAA0B,EAAA,GAAd1B,cAAc;AA2CpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}